#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
import time
import re
import mysql.connector
from mysql.connector import Error
from .config import DB_CONFIG, CREATE_TRACKING_TABLE, ENABLE_FUZZY_MATCHING, ENABLE_DETAILED_LOGGING
from .lib.version_utils import VersionUtils


class DatabaseManager:
    def __init__(self, analyzer=None):
        self.connection = None
        self.analyzer = analyzer
        self._similar_apps_cache = {}  # –ö—ç—à –¥–ª—è fuzzy matching

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = mysql.connector.connect(**DB_CONFIG)
            if self.connection.is_connected():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor = self.connection.cursor()
                cursor.execute(CREATE_TRACKING_TABLE)
                self.connection.commit()
                cursor.close()

                return True
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection and self.connection.is_connected():
            self.connection.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    def check_version_in_apk_original(self, news_id, current_version):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ø–æ–ª–µ apk-original –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π"""
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ xfields –∏–∑ dle_post
            xfields_query = "SELECT xfields FROM dle_post WHERE id = %s"
            cursor.execute(xfields_query, (news_id,))
            result = cursor.fetchone()
            
            if not result:
                print(f"‚ùå –ù–æ–≤–æ—Å—Ç—å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                cursor.close()
                return True  # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            xfields = result[0]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –ø–æ–ª—è apk-original
            import re
            apk_original_match = re.search(r'apk-original\|\[attachment=\d+:(.+?)\]', xfields)
            
            if not apk_original_match:
                print(f"‚ÑπÔ∏è –ü–æ–ª–µ apk-original –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç attachment –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                cursor.close()
                return True  # –ï—Å–ª–∏ –Ω–µ—Ç attachment, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            attachment_name = apk_original_match.group(1)
            print(f"üîç –ù–∞–π–¥–µ–Ω attachment –≤ apk-original: {attachment_name}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ attachment
            version_match = re.search(r'(\d+\.\d+(?:\.\d+)?)', attachment_name)
            if not version_match:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é –∏–∑ attachment: {attachment_name}")
                cursor.close()
                return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            apk_original_version = version_match.group(1)
            print(f"üì± –í–µ—Ä—Å–∏—è –≤ apk-original: {apk_original_version}")
            print(f"üåê –í–µ—Ä—Å–∏—è –Ω–∞ —Å–∞–π—Ç–µ: {current_version}")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
            from .lib.version_utils import VersionUtils
            version_utils = VersionUtils()
            
            if version_utils.compare_versions(current_version, apk_original_version) > 0:
                print(f"‚úÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {apk_original_version} ‚Üí {current_version}")
                cursor.close()
                return True  # –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            else:
                print(f"‚è≠Ô∏è –í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: {apk_original_version} >= {current_version}")
                cursor.close()
                return False  # –ù–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ –≤ apk-original: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    def check_if_update_needed(self, news_id, app_name, current_version, sha256_hash=None, package_name=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π"""
        try:
            cursor = self.connection.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ SHA-256 (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
            if sha256_hash:
                sha256_query = """
                SELECT id, version, file_size, checksum, file_path, source_priority
                FROM file_tracking
                WHERE sha256_hash = %s
                ORDER BY source_priority DESC, last_updated DESC LIMIT 1
                """
                cursor.execute(sha256_query, (sha256_hash,))
                sha256_result = cursor.fetchone()
                if sha256_result:
                    print(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –¥—É–±–ª—å –ø–æ SHA-256: {sha256_result[1]}")
                    if self.analyzer:
                        self.analyzer.log_duplicate_found('sha256', sha256_result[1], sha256_result[2], 
                                                        '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞')
                    cursor.close()
                    return False, sha256_result
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ package_name —É–±—Ä–∞–Ω–∞ - package name –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —É —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ news_id + app_name + version (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            original_query = """
            SELECT id, version, file_size, checksum, file_path, source_priority
            FROM file_tracking
            WHERE news_id = %s AND app_name = %s AND version = %s
            ORDER BY source_priority DESC, last_updated DESC LIMIT 1
            """
            cursor.execute(original_query, (news_id, app_name, current_version))
            result = cursor.fetchone()
            
            if result:
                print(f"‚úÖ –í–µ—Ä—Å–∏—è {current_version} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
                if self.analyzer:
                    self.analyzer.log_duplicate_found('name', app_name, current_version, 
                                                    '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–∏')
                cursor.close()
                return False, result
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if ENABLE_FUZZY_MATCHING:
                similar_apps = self.find_similar_apps(app_name, threshold=0.8)
                if similar_apps:
                    print(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
                    for similar in similar_apps[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                        print(f"   - {similar['app_name']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similar['similarity']:.2f})")
                    
                    if self.analyzer and ENABLE_DETAILED_LOGGING:
                        self.analyzer.log_similar_apps(app_name, similar_apps)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Ç–∞–∫–∞—è –∂–µ –≤–µ—Ä—Å–∏—è
                    for similar in similar_apps:
                        similar_query = """
                        SELECT id, version, file_size, checksum, file_path, source_priority
                        FROM file_tracking
                        WHERE app_name = %s AND version = %s
                        ORDER BY source_priority DESC, last_updated DESC LIMIT 1
                        """
                        cursor.execute(similar_query, (similar['app_name'], current_version))
                        similar_result = cursor.fetchone()
                        if similar_result:
                            print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª—å: {similar['app_name']} v{current_version} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similar['similarity']:.2f})")
                            if self.analyzer and ENABLE_DETAILED_LOGGING:
                                self.analyzer.log_duplicate_found('name', similar['app_name'], current_version, 
                                                                f'–ü–æ—Ö–æ–∂–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å—Ö–æ–∂–µ—Å—Ç—å: {similar["similarity"]:.2f})', 
                                                                similar['similarity'])
                            cursor.close()
                            return False, similar_result
            
            cursor.close()
            print(f"üìù –ù–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –≤–µ—Ä—Å–∏–∏ {current_version} –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
            return True, None

        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏: {e}")
            return True, None

    def add_to_dle_files(self, news_id, app_name, version, file_extension, downloaded_filename, file_size, checksum, download_dir):
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É dle_files"""
        try:
            cursor = self.connection.cursor()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—è name
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
            readable_name = self._transliterate_cyrillic(app_name)
            readable_filename = f"{readable_name} {version}{file_extension}"
            
            print(f"üìù –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è dle_files.name: {readable_filename}")

            # –î–ª—è onserver –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (—É–∂–µ –æ—á–∏—â–µ–Ω–Ω–æ–µ)
            relative_path = f"{download_dir.name}/{downloaded_filename}"
            
            print(f"üóÇÔ∏è –ü—É—Ç—å –≤ onserver (–±–µ–∑ timestamp): {relative_path}")
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {downloaded_filename}")

            insert_query = """
            INSERT INTO dle_files (news_id, name, onserver, author, date, dcount, size, checksum, driver, is_public)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º timestamp –¥–ª—è –ø–æ–ª—è date
            timestamp = str(int(time.time()))
            
            values = (
                news_id,
                readable_filename,  # –ß–∏—Ç–∞–µ–º–æ–µ –∏–º—è –≤ –ø–æ–ª–µ name
                relative_path,      # –ü—É—Ç—å —Å –∏–º–µ–Ω–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–æ–ª–µ onserver
                'sergeyAi',
                timestamp,
                0,
                file_size,
                checksum,
                2,
                0
            )

            cursor.execute(insert_query, values)
            file_id = cursor.lastrowid
            self.connection.commit()
            cursor.close()

            print(f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ dle_files —Å ID: {file_id}")
            print(f"üìÅ name: {readable_filename}")
            print(f"üóÇÔ∏è onserver: {relative_path}")
            return file_id

        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ dle_files: {e}")
            return None

    def update_dle_post(self, news_id, file_id, app_name, version, file_extension):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ apk-original –≤ —Ç–∞–±–ª–∏—Ü–µ dle_post"""
        try:
            cursor = self.connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ xfields
            select_query = "SELECT xfields FROM dle_post WHERE id = %s"
            cursor.execute(select_query, (news_id,))
            result = cursor.fetchone()

            if not result:
                print(f"‚ùå –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            xfields = result[0]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è attachment (—Ç–∞–∫–æ–µ –∂–µ –∫–∞–∫ –≤ dle_files.name)
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
            readable_name = self._transliterate_cyrillic(app_name)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: "app_name version.extension"
            readable_filename = f"{readable_name} {version}{file_extension}"
            
            print(f"üìù –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è attachment: {readable_filename}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ apk-original
            new_attachment = f"[attachment={file_id}:{readable_filename}]"

            # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ apk-original
            pattern = r'apk-original\|[^|]*\|\|'
            replacement = f'apk-original|{new_attachment}||'

            if re.search(pattern, xfields):
                new_xfields = re.sub(pattern, replacement, xfields)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                new_xfields = xfields + f'||apk-original|{new_attachment}||'

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            update_query = "UPDATE dle_post SET xfields = %s WHERE id = %s"
            cursor.execute(update_query, (new_xfields, news_id))
            self.connection.commit()
            cursor.close()

            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ apk-original –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {new_attachment}")
            return True

        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dle_post: {e}")
            return False

    def _transliterate_cyrillic(self, text):
        """–ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É"""
        cyrillic_to_latin = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
            '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
            '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
            '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
            '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
        }
        
        result = ""
        for char in text:
            if char in cyrillic_to_latin:
                result += cyrillic_to_latin[char]
            elif char == '+':
                result += ' '  # –ó–∞–º–µ–Ω—è–µ–º + –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            else:
                result += char
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        result = re.sub(r'\s+', ' ', result).strip()
        
        return result

    def add_to_tracking(self, news_id, app_name, version, file_size, file_path, checksum, source_url, sha256_hash=None, package_name=None, source_priority=0):
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        try:
            cursor = self.connection.cursor()

            insert_query = """
            INSERT INTO file_tracking (news_id, app_name, version, file_size, file_path, checksum, sha256_hash, package_name, source_priority, source_url)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """

            # –í version –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –≤–µ—Ä—Å–∏—é, –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            values = (news_id, app_name, version, file_size, str(file_path), checksum, sha256_hash, package_name, source_priority, source_url)

            cursor.execute(insert_query, values)
            self.connection.commit()
            cursor.close()

            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
            print(f"   app_name: {app_name}")
            print(f"   version: {version}")
            print(f"   sha256: {sha256_hash[:16] if sha256_hash else 'N/A'}...")
            print(f"   package_name: {package_name or 'N/A'}")
            print(f"   source_priority: {source_priority}")
            return True

        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ tracking: {e}")
            return False
    
    def find_similar_apps(self, app_name, threshold=0.8):
        """–ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é fuzzy matching —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{app_name}_{threshold}"
        if cache_key in self._similar_apps_cache:
            return self._similar_apps_cache[cache_key]
        
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            query = """
            SELECT DISTINCT app_name, COUNT(*) as count
            FROM file_tracking
            GROUP BY app_name
            ORDER BY count DESC
            """
            cursor.execute(query)
            all_apps = cursor.fetchall()
            cursor.close()
            
            similar_apps = []
            for stored_app_name, count in all_apps:
                if VersionUtils.fuzzy_match_app_names(app_name, stored_app_name, threshold):
                    similar_apps.append({
                        'app_name': stored_app_name,
                        'count': count,
                        'similarity': self._calculate_similarity(app_name, stored_app_name)
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
            similar_apps.sort(key=lambda x: x['similarity'], reverse=True)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._similar_apps_cache[cache_key] = similar_apps
            
            return similar_apps
            
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    def _calculate_similarity(self, name1, name2):
        """–í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
        name1_norm = re.sub(r'[^\w\s]', '', name1.lower()).strip()
        name2_norm = re.sub(r'[^\w\s]', '', name2.lower()).strip()
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
        words1 = set(name1_norm.split())
        words2 = set(name2_norm.split())
        
        if not words1 or not words2:
            return 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏
        intersection = len(words1.intersection(words2))
        union = len(words1.union(words2))
        
        return intersection / union if union > 0 else 0
    
    def check_duplicate_by_content(self, sha256_hash):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞ (SHA-256)"""
        try:
            cursor = self.connection.cursor()
            query = """
            SELECT id, app_name, version, file_size, file_path, source_priority
            FROM file_tracking
            WHERE sha256_hash = %s
            ORDER BY source_priority DESC, last_updated DESC
            LIMIT 1
            """
            cursor.execute(query, (sha256_hash,))
            result = cursor.fetchone()
            cursor.close()
            
            if result:
                print(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –¥—É–±–ª—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {result[1]} v{result[2]}")
                return result
            
            return None
            
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {e}")
            return None
    
    def check_duplicate_by_size(self, file_size, tolerance_percent=5):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
        try:
            cursor = self.connection.cursor()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            tolerance = int(file_size * tolerance_percent / 100)
            min_size = file_size - tolerance
            max_size = file_size + tolerance
            
            query = """
            SELECT id, app_name, version, file_size, file_path, source_priority, sha256_hash
            FROM file_tracking
            WHERE file_size BETWEEN %s AND %s
            ORDER BY ABS(file_size - %s) ASC, source_priority DESC, last_updated DESC
            LIMIT 5
            """
            cursor.execute(query, (min_size, max_size, file_size))
            results = cursor.fetchall()
            cursor.close()
            
            if results:
                print(f"üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ—Ö–æ–∂–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ({len(results)} —à—Ç.):")
                for result in results:
                    size_diff = abs(result[3] - file_size)
                    size_diff_percent = (size_diff / file_size) * 100
                    print(f"   - {result[1]} v{result[2]} ({result[3]} –±–∞–π—Ç, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {size_diff_percent:.1f}%)")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –±–ª–∏–∑–∫–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
                return results[0]
            
            return None
            
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª—è –ø–æ —Ä–∞–∑–º–µ—Ä—É: {e}")
            return None
    
    def should_replace_existing(self, existing_data, new_source_priority):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–æ–≤—ã–º —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        if not existing_data:
            return False
        
        existing_priority = existing_data[5] if len(existing_data) > 5 else 0
        return new_source_priority > existing_priority
    
    def replace_lower_priority_file(self, existing_id, new_data):
        """–ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        try:
            cursor = self.connection.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            update_query = """
            UPDATE file_tracking 
            SET app_name = %s, version = %s, file_size = %s, file_path = %s, 
                checksum = %s, sha256_hash = %s, package_name = %s, 
                source_priority = %s, source_url = %s, last_updated = CURRENT_TIMESTAMP
            WHERE id = %s
            """
            
            values = (
                new_data['app_name'], new_data['version'], new_data['file_size'],
                new_data['file_path'], new_data['checksum'], new_data['sha256_hash'],
                new_data['package_name'], new_data['source_priority'], new_data['source_url'],
                existing_id
            )
            
            cursor.execute(update_query, values)
            self.connection.commit()
            cursor.close()
            
            print(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω —Ñ–∞–π–ª —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (ID: {existing_id})")
            return True
            
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def delete_old_file_from_apk_original(self, news_id):
        """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ –ø–æ–ª—è apk-original"""
        print("üîÑ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ delete_old_file_from_apk_original")
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ apk-original
            select_query = "SELECT xfields FROM dle_post WHERE id = %s"
            cursor.execute(select_query, (news_id,))
            result = cursor.fetchone()
            
            if not result:
                print(f"‚ùå –ù–æ–≤–æ—Å—Ç—å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                cursor.close()
                return False
                
            xfields = result[0]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π attachment ID –∏–∑ –ø–æ–ª—è apk-original
            import re
            old_attachment_match = re.search(r'apk-original\|\[attachment=(\d+):', xfields)
            
            if not old_attachment_match:
                print(f"‚ÑπÔ∏è –ü–æ–ª–µ apk-original –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç attachment –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                cursor.close()
                return False
                
            old_file_id = int(old_attachment_match.group(1))
            print(f"üîç –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª ID {old_file_id} –≤ –ø–æ–ª–µ apk-original")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–º —Ñ–∞–π–ª–µ
            file_query = "SELECT onserver, driver, name FROM dle_files WHERE id = %s"
            cursor.execute(file_query, (old_file_id,))
            file_result = cursor.fetchone()
            
            if not file_result:
                print(f"‚ùå –§–∞–π–ª ID {old_file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dle_files")
                cursor.close()
                return False
                
            onserver, driver, filename = file_result
            print(f"üìÅ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename} (–ø—É—Ç—å: {onserver}, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {driver})")
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –ë–î (—Ñ–∞–π–ª –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫–µ)
            delete_query = "DELETE FROM dle_files WHERE id = %s"
            cursor.execute(delete_query, (old_file_id,))
            self.connection.commit()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª ID {old_file_id} –∏–∑ –ë–î: {filename}")
            cursor.close()
            return True
                
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    
    def update_existing_file_in_dle_files(self, news_id, app_name, version, file_extension, downloaded_filename, file_size, checksum, download_dir):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ dle_files –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π"""
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ dle_files –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ xfields –∏–∑ dle_post
            xfields_query = "SELECT xfields FROM dle_post WHERE id = %s"
            cursor.execute(xfields_query, (news_id,))
            result = cursor.fetchone()
            
            if not result:
                print(f"‚ùå –ù–æ–≤–æ—Å—Ç—å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                cursor.close()
                return None
                
            xfields = result[0]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π attachment ID –∏–∑ –ø–æ–ª—è apk-original
            import re
            old_attachment_match = re.search(r'apk-original\|\[attachment=(\d+):', xfields)
            
            if not old_attachment_match:
                print(f"‚ÑπÔ∏è –ü–æ–ª–µ apk-original –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç attachment –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                cursor.close()
                return None
                
            old_file_id = int(old_attachment_match.group(1))
            print(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª ID {old_file_id} –≤ –ø–æ–ª–µ apk-original")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–º —Ñ–∞–π–ª–µ
            file_query = "SELECT onserver, driver, name FROM dle_files WHERE id = %s"
            cursor.execute(file_query, (old_file_id,))
            file_result = cursor.fetchone()
            
            if not file_result:
                print(f"‚ùå –§–∞–π–ª ID {old_file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dle_files")
                cursor.close()
                return None
                
            old_onserver, driver, old_filename = file_result
            print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {old_filename} (–ø—É—Ç—å: {old_onserver}, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {driver})")
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç—É—Ç
            print(f"üîß –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(f"   üîß old_file_id = {old_file_id}")
            print(f"   üîß old_onserver = {old_onserver}")
            print(f"   üîß driver = {driver}")
            print(f"   üîß old_filename = {old_filename}")
            print(f"   üîß –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ update_existing_file_in_dle_files –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(f"       - news_id: {news_id}")
            print(f"       - app_name: {app_name}")
            print(f"       - version: {version}")
            print(f"       - file_extension: {file_extension}")
            print(f"       - downloaded_filename: {downloaded_filename}")
            print(f"       - file_size: {file_size}")
            print(f"       - checksum: {checksum}")
            print(f"       - download_dir.name: {download_dir.name if download_dir else 'N/A'}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            print(f"\nüóÇÔ∏è ===== –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–û–ì–û –§–ê–ô–õ–ê =====")
            print(f"üìÅ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            print(f"   üóÇÔ∏è –ü—É—Ç—å –≤ –ë–î: {old_onserver}")
            print(f"   üéØ –•—Ä–∞–Ω–∏–ª–∏—â–µ ID: {driver}")
            print(f"   üìù –ò–º—è —Ñ–∞–π–ª–∞: {old_filename}")
            
            # –ù–æ–≤–∞—è –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            from .lib.file_deleter import FileDeleter
            FileDeleter.delete_old_file_simple(old_filename, old_onserver, driver)
            
            print(f"üóÇÔ∏è ===== –ö–û–ù–ï–¶ –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–û–ì–û –§–ê–ô–õ–ê =====\n")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            readable_name = self._transliterate_cyrillic(app_name)
            new_readable_filename = f"{readable_name} {version}{file_extension}"
            new_onserver = f"{download_dir.name}/{downloaded_filename}"
            current_timestamp = int(time.time())
            
            print(f"üìù –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {new_readable_filename}")
            print(f"üóÇÔ∏è –ù–æ–≤—ã–π –ø—É—Ç—å: {new_onserver}")
            print(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ downloaded_filename –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {downloaded_filename}")
            
            # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Å–∫–∞—á–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–ª—è–µ–º
            if not downloaded_filename.endswith(('.apk', '.xapk')):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                if 'xapk' in file_extension.lower():
                    final_filename = f"{downloaded_filename}.xapk"
                else:
                    final_filename = f"{downloaded_filename}.apk"
                
                print(f"üîß –°–∫–∞—á–∞–π —Ñ–∞–π–ª –ë–ï–ó –†–ê–°–®–ò–†–ï–ù–ò–Ø! –î–æ–±–∞–≤–ª–µ–Ω–æ: {downloaded_filename} ‚Üí {final_filename}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∞—á–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_onserver = f"{download_dir.name}/{final_filename}"
                downloaded_filename = final_filename
                
                print(f"üóÇÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –ø—É—Ç—å: {new_onserver}")
                print(f"üóÇÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {downloaded_filename}")
                
                # –§–ò–ó–ò–ß–ï–°–ö–ò –ü–ï–†–ï–ò–ú–ï–ù–û–í–´–í–ê–ï–ú –§–ê–ô–õ –ù–ê –î–ò–°–ö–ï
                try:
                    import os
                    from pathlib import Path
                    
                    old_file_path = download_dir / (downloaded_filename.replace('.xapk', '').replace('.apk', ''))
                    new_file_path = download_dir / downloaded_filename
                    
                    print(f"üîÑ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:")
                    print(f"   –°—Ç–∞—Ä—ã–π: {old_file_path}")
                    print(f"   –ù–æ–≤—ã–π: {new_file_path}")
                    
                    if old_file_path.exists() and not new_file_path.exists():
                        os.rename(str(old_file_path), str(new_file_path))
                        print(f"‚úÖ –§–∏–∑–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old_file_path} ‚Üí {new_file_path}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ dle_files
            update_query = """
            UPDATE dle_files 
            SET name = %s, onserver = %s, date = %s, size = %s, checksum = %s
            WHERE id = %s
            """
            cursor.execute(update_query, (
                new_readable_filename,
                new_onserver,
                current_timestamp,
                file_size,
                checksum,
                old_file_id
            ))
            
            self.connection.commit()
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID {old_file_id} –≤ dle_files")
            cursor.close()
            return old_file_id
                
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ dle_files: {e}")
            return None
    
