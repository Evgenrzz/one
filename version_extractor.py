#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü
"""
import re
from playwright.async_api import async_playwright
from .config import BROWSER_ARGS, USER_AGENT, CLOUDFLARE_TIMEOUT, PAGE_LOAD_TIMEOUT
from .lib.version_utils import VersionUtils


class VersionExtractor:
    def extract_version_from_filename(self, filename):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        version = VersionUtils.extract_version_from_text(filename)
        return VersionUtils.normalize_version(version) if version else "1.0.0"

    def extract_app_name_from_filename(self, filename):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        return VersionUtils.extract_app_name_from_filename(filename)

    async def extract_version_from_page(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        async with async_playwright() as p:
            browser = await p.chromium.launch(
                headless=True,
                args=BROWSER_ARGS
            )
            context = await browser.new_context(
                user_agent=USER_AGENT
            )
            page = await context.new_page()

            try:
                print(f"üåê –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
                await page.goto(url, wait_until="domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
                
                # –ñ–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare –µ—Å–ª–∏ –µ—Å—Ç—å
                await self._wait_for_cloudflare(page)
                
                # –ò—â–µ–º –≤–µ—Ä—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                version_selectors = []
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∞–π—Ç–∞
                if 'apkcombo.com' in url:
                    version_selectors = [
                        "div.version",
                        ".version",
                        "[class*='version']",
                        ".app-version",
                        ".ver",
                        "[class*='ver']",
                        "span.version",
                        "div.ver",
                        ".app-info .version",
                        ".download-info .version",
                        "div[class*='app'] span[class*='version']",
                        ".info .version",
                        "div.info span.version"
                    ]
                elif 'apkpure.com' in url:
                    version_selectors = [
                        "div.version",
                        ".version",
                        "[class*='version']",
                        ".app-version",
                        ".ver",
                        "[class*='ver']",
                        "span.version",
                        "div.ver",
                        ".details .version",
                        ".app-details .version",
                        ".info .version",
                        "div[class*='detail'] span[class*='version']",
                        ".version-info",
                        "div[class*='version']"
                    ]
                else:
                    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    version_selectors = [
                        "div.version", ".version", "[class*='version']", ".app-version",
                        ".ver", "[class*='ver']", "span.version", "div.ver"
                    ]
                
                print(f"üîç –ò—â–µ–º –≤–µ—Ä—Å–∏—é —Å {len(version_selectors)} —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏...")
                
                for i, selector in enumerate(version_selectors, 1):
                    try:
                        print(f"  {i}. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                        element = await page.query_selector(selector)
                        if element:
                            version_text = await element.inner_text()
                            print(f"    üìÑ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: '{version_text.strip()}'")
                            
                            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤–µ—Ä—Å–∏–∏
                            version_patterns = [
                                r'(\d+\.\d+\.\d+)',           # 1.2.3
                                r'(\d+\.\d+)',                # 1.2
                                r'Version\s*:?\s*(\d+\.\d+\.\d+)',  # Version: 1.2.3
                                r'–í–µ—Ä—Å–∏—è\s*:?\s*(\d+\.\d+\.\d+)',   # –í–µ—Ä—Å–∏—è: 1.2.3
                                r'v(\d+\.\d+\.\d+)',          # v1.2.3
                                r'(\d+\.\d+\.\d+\.\d+)'       # 1.2.3.4
                            ]
                            
                            for pattern in version_patterns:
                                version_match = re.search(pattern, version_text, re.IGNORECASE)
                                if version_match:
                                    version = version_match.group(1)
                                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: {version}")
                                    return version
                        else:
                            print(f"    ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                        continue
                
                # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                print("üîç –ò—â–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                try:
                    page_text = await page.inner_text('body')
                    print(f"üìÑ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    # –ò—â–µ–º –≤–µ—Ä—Å–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    version_patterns = [
                        r'Version\s*:?\s*(\d+\.\d+\.\d+)',
                        r'–í–µ—Ä—Å–∏—è\s*:?\s*(\d+\.\d+\.\d+)',
                        r'v(\d+\.\d+\.\d+)',
                        r'(\d+\.\d+\.\d+)',
                        r'(\d+\.\d+)'
                    ]
                    
                    for pattern in version_patterns:
                        matches = re.findall(pattern, page_text, re.IGNORECASE)
                        if matches:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                            version = matches[0]
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {version}")
                            return version
                    
                    print("‚ùå –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                
                print("‚ö†Ô∏è –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return None
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                return None
            finally:
                await context.close()
                await browser.close()

    async def _wait_for_cloudflare(self, page, max_wait=CLOUDFLARE_TIMEOUT):
        """–ñ–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare"""
        import asyncio
        
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Cloudflare...")
        for i in range(max_wait):
            await asyncio.sleep(1)
            try:
                current_url = page.url
                page_title = await page.title()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã Cloudflare
                cf_indicators = [
                    "div.cf-browser-verification",
                    "div.cf-checking-browser",
                    "[data-ray]",
                    "h1:has-text('Checking your browser')",
                    "h1:has-text('Just a moment')"
                ]
                
                is_cf_active = False
                for indicator in cf_indicators:
                    try:
                        element = await page.query_selector(indicator)
                        if element:
                            is_cf_active = True
                            break
                    except:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ URL
                if ("just a moment" in page_title.lower() or
                    "checking" in page_title.lower() or
                    "cloudflare" in current_url.lower()):
                    is_cf_active = True
                
                if not is_cf_active:
                    print("‚úÖ Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    return True
                    
                if i % 10 == 0:
                    print(f"‚è≥ –ñ–¥–µ–º Cloudflare... ({i+1}/{max_wait})")
                    
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Cloudflare: {e}")
                continue
                
        print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è Cloudflare")
        return False

    def extract_clean_version(self, version_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –∏–∑ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        version = VersionUtils.extract_version_from_text(version_text)
        clean_version = VersionUtils.normalize_version(version) if version else "1.0.0"
        print(f"üßπ –ò–∑–≤–ª–µ—á–µ–Ω–∞ —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è: {clean_version} –∏–∑ '{version_text}'")
        return clean_version

    def get_version(self, filename, page_version=None):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤–µ—Ä—Å–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã > –≤–µ—Ä—Å–∏—è –∏–∑ —Ñ–∞–π–ª–∞
        if page_version:
            clean_page_version = self.extract_clean_version(page_version)
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {clean_page_version}")
            return clean_page_version
        
        file_version = self.extract_version_from_filename(filename)
        clean_file_version = self.extract_clean_version(file_version)
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {clean_file_version}")
        return clean_file_version
    
    def extract_package_name_from_url(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º package name –∏–∑ URL"""
        return VersionUtils.extract_package_name_from_url(url)
    
    def get_source_priority(self, source_url):
        """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        return VersionUtils.get_source_priority(source_url)
