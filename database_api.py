#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import requests
import re
import time

try:
    from .config import API_CONFIG, ENABLE_FUZZY_MATCHING, ENABLE_DETAILED_LOGGING
    from .lib.version_utils import VersionUtils
except ImportError:
    from config import API_CONFIG, ENABLE_FUZZY_MATCHING, ENABLE_DETAILED_LOGGING
    from lib.version_utils import VersionUtils


class DatabaseManagerAPI:
    def __init__(self, analyzer=None):
        self.analyzer = analyzer
        self._similar_apps_cache = {}  # –ö—ç—à –¥–ª—è fuzzy matching
        
        # API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ config.py
        self.api_url = API_CONFIG['url']
        self.api_key = API_CONFIG['key']
        self.api_timeout = API_CONFIG['timeout']

    def api_request(self, action, params=None, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.api_url}?action={action}&key={self.api_key}"
        
        try:
            if data:
                response = requests.post(url, data=data, timeout=self.api_timeout)
            else:
                if params:
                    url += "&" + "&".join([f"{k}={v}" for k, v in params.items()])
                response = requests.get(url, timeout=self.api_timeout)
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"HTTP {response.status_code}: {response.text}"}
        except Exception as e:
            return {"error": str(e)}

    def connect(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
        return True

    def disconnect(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("üîí API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

    def check_version_in_apk_original(self, news_id, current_version):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ø–æ–ª–µ apk-original –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π"""
        try:
            response = self.api_request("check_apk_original", {
                "id": news_id,
                "version": current_version
            })
            
            if not response.get("success"):
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            data = response
            news_id = data["news_id"]
            attachment_name = data.get("attachment_name")
            apk_original_version = data.get("apk_original_version")
            need_update = data.get("need_update", True)
            
            if attachment_name:
                print(f"üîç –ù–∞–π–¥–µ–Ω attachment –≤ apk-original: {attachment_name}")
            else:
                print(f"‚ÑπÔ∏è –ü–æ–ª–µ apk-original –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç attachment –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                return True  # –ï—Å–ª–∏ –Ω–µ—Ç attachment, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            if apk_original_version:
                print(f"üì± –í–µ—Ä—Å–∏—è –≤ apk-original: {apk_original_version}")
                print(f"üåê –í–µ—Ä—Å–∏—è –Ω–∞ —Å–∞–π—Ç–µ: {current_version}")
                
                if need_update:
                    print(f"‚úÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {apk_original_version} ‚Üí {current_version}")
                    return True  # –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                else:
                    print(f"‚è≠Ô∏è –í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: {apk_original_version} >= {current_version}")
                    return False  # –ù–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é –∏–∑ attachment: {attachment_name}")
                return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ –≤ apk-original: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    def check_if_update_needed(self, news_id, app_name, current_version, sha256_hash=None, package_name=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ —á–µ—Ä–µ–∑ API
            params = {
                "news_id": news_id,
                "app_name": app_name,
                "version": current_version
            }
            
            if sha256_hash:
                params["sha256_hash"] = sha256_hash
            if package_name:
                params["package_name"] = package_name
            
            response = self.api_request("check_duplicate", params)
            
            if not response.get("success"):
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return True, None
            
            duplicates = response.get("duplicates", {})
            has_duplicates = response.get("has_duplicates", False)
            
            if not has_duplicates:
                print(f"üìù –ù–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –≤–µ—Ä—Å–∏–∏ {current_version} –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                return True, None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏ –ø–æ SHA-256
            if "sha256" in duplicates:
                sha256_result = duplicates["sha256"]
                print(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –¥—É–±–ª—å –ø–æ SHA-256: {sha256_result['version']}")
                if self.analyzer:
                    self.analyzer.log_duplicate_found('sha256', sha256_result['version'], sha256_result['file_size'], 
                                                    '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞')
                return False, sha256_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≤–µ—Ä—Å–∏–∏
            if "exact" in duplicates:
                exact_result = duplicates["exact"]
                print(f"‚úÖ –í–µ—Ä—Å–∏—è {current_version} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
                if self.analyzer:
                    self.analyzer.log_duplicate_found('name', app_name, current_version, 
                                                    '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–∏')
                return False, exact_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É
            if "size" in duplicates:
                size_matches = duplicates["size"]
                print(f"üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ—Ö–æ–∂–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ({len(size_matches)} —à—Ç.):")
                for match in size_matches:
                    size_diff = abs(match['file_size'] - (sha256_hash and len(sha256_hash) or 0))
                    print(f"   - {match['app_name']} v{match['version']} ({match['file_size']} –±–∞–π—Ç)")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –ø–æ—Ö–æ–∂–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
                return False, size_matches[0] if size_matches else None
            
            print(f"üìù –ù–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –≤–µ—Ä—Å–∏–∏ {current_version} –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
            return True, None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏: {e}")
            return True, None

    def add_to_dle_files(self, news_id, app_name, version, file_extension, downloaded_filename, file_size, checksum, download_dir):
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É dle_files —á–µ—Ä–µ–∑ API"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—è name
            readable_name = self._transliterate_cyrillic(app_name)
            readable_filename = f"{readable_name} {version}{file_extension}"
            
            print(f"üìù –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è dle_files.name: {readable_filename}")

            # –î–ª—è onserver –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (—É–∂–µ –æ—á–∏—â–µ–Ω–Ω–æ–µ)
            relative_path = f"{download_dir.name}/{downloaded_filename}"
            
            print(f"üóÇÔ∏è –ü—É—Ç—å –≤ onserver (–±–µ–∑ timestamp): {relative_path}")
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {downloaded_filename}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º timestamp –¥–ª—è –ø–æ–ª—è date
            timestamp = str(int(time.time()))
            
            data = {
                "news_id": news_id,
                "name": readable_filename,
                "onserver": relative_path,
                "author": "sergeyAi",
                "date": timestamp,
                "dcount": 0,
                "size": file_size,
                "checksum": checksum,
                "driver": 2,
                "is_public": 0
            }
            
            response = self.api_request("add_dle_file", data=data)
            
            if response.get("success"):
                file_id = response["file_id"]
                print(f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ dle_files —Å ID: {file_id}")
                print(f"üìÅ name: {readable_filename}")
                print(f"üóÇÔ∏è onserver: {relative_path}")
                return file_id
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ dle_files: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ dle_files: {e}")
            return None

    def update_dle_post(self, news_id, file_id, app_name, version, file_extension):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ apk-original –≤ —Ç–∞–±–ª–∏—Ü–µ dle_post —á–µ—Ä–µ–∑ API"""
        try:
            data = {
                "news_id": news_id,
                "file_id": file_id,
                "app_name": app_name,
                "version": version,
                "file_extension": file_extension
            }
            
            response = self.api_request("update_apk_original", data=data)
            
            if response.get("success"):
                attachment = response["attachment"]
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ apk-original –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {attachment}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dle_post: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dle_post: {e}")
            return False

    def _transliterate_cyrillic(self, text):
        """–ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É"""
        cyrillic_to_latin = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
            '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
            '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
            '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
            '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
        }
        
        result = ""
        for char in text:
            if char in cyrillic_to_latin:
                result += cyrillic_to_latin[char]
            elif char == '+':
                result += ' '  # –ó–∞–º–µ–Ω—è–µ–º + –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            else:
                result += char
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        result = re.sub(r'\s+', ' ', result).strip()
        
        return result

    def add_to_tracking(self, news_id, app_name, version, file_size, file_path, checksum, source_url, sha256_hash=None, package_name=None, source_priority=0):
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"""
        try:
            data = {
                "news_id": news_id,
                "app_name": app_name,
                "version": version,
                "file_size": file_size,
                "file_path": str(file_path),
                "checksum": checksum,
                "source_url": source_url,
                "source_priority": source_priority
            }
            
            if sha256_hash:
                data["sha256_hash"] = sha256_hash
            if package_name:
                data["package_name"] = package_name
            
            response = self.api_request("add_tracking", data=data)
            
            if response.get("success"):
                tracking_id = response["tracking_id"]
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (ID: {tracking_id}):")
                print(f"   app_name: {app_name}")
                print(f"   version: {version}")
                print(f"   sha256: {sha256_hash[:16] if sha256_hash else 'N/A'}...")
                print(f"   package_name: {package_name or 'N/A'}")
                print(f"   source_priority: {source_priority}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ tracking: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ tracking: {e}")
            return False
    
    def find_similar_apps(self, app_name, threshold=0.8):
        """–ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é fuzzy matching —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{app_name}_{threshold}"
        if cache_key in self._similar_apps_cache:
            return self._similar_apps_cache[cache_key]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ tracking —á–µ—Ä–µ–∑ API
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö app_name
            similar_apps = []
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._similar_apps_cache[cache_key] = similar_apps
            
            return similar_apps
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
            return []
    
    def _calculate_similarity(self, name1, name2):
        """–í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
        name1_norm = re.sub(r'[^\w\s]', '', name1.lower()).strip()
        name2_norm = re.sub(r'[^\w\s]', '', name2.lower()).strip()
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
        words1 = set(name1_norm.split())
        words2 = set(name2_norm.split())
        
        if not words1 or not words2:
            return 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏
        intersection = len(words1.intersection(words2))
        union = len(words1.union(words2))
        
        return intersection / union if union > 0 else 0
    
    def check_duplicate_by_content(self, sha256_hash):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞ (SHA-256)"""
        try:
            response = self.api_request("check_duplicate", {
                "sha256_hash": sha256_hash
            })
            
            if response.get("success"):
                duplicates = response.get("duplicates", {})
                if "sha256" in duplicates:
                    result = duplicates["sha256"]
                    print(f"üîç –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –¥—É–±–ª—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {result['app_name']} v{result['version']}")
                    return result
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {e}")
            return None
    
    def check_duplicate_by_size(self, file_size, tolerance_percent=5):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
        try:
            response = self.api_request("check_duplicate", {
                "file_size": file_size
            })
            
            if response.get("success"):
                duplicates = response.get("duplicates", {})
                if "size" in duplicates:
                    results = duplicates["size"]
                    print(f"üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ—Ö–æ–∂–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ({len(results)} —à—Ç.):")
                    for result in results:
                        size_diff = abs(result['file_size'] - file_size)
                        size_diff_percent = (size_diff / file_size) * 100
                        print(f"   - {result['app_name']} v{result['version']} ({result['file_size']} –±–∞–π—Ç, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {size_diff_percent:.1f}%)")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –±–ª–∏–∑–∫–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
                    return results[0] if results else None
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª—è –ø–æ —Ä–∞–∑–º–µ—Ä—É: {e}")
            return None
    
    def should_replace_existing(self, existing_data, new_source_priority):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–æ–≤—ã–º —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        if not existing_data:
            return False
        
        existing_priority = existing_data.get('source_priority', 0) if isinstance(existing_data, dict) else (existing_data[5] if len(existing_data) > 5 else 0)
        return new_source_priority > existing_priority
    
    def replace_lower_priority_file(self, existing_id, new_data):
        """–ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ API
            data = {
                "file_id": existing_id,
                "name": new_data['app_name'],
                "onserver": new_data['file_path'],
                "date": int(time.time()),
                "size": new_data['file_size'],
                "checksum": new_data['checksum']
            }
            
            response = self.api_request("update_dle_file", data=data)
            
            if response.get("success"):
                print(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω —Ñ–∞–π–ª —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (ID: {existing_id})")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def delete_old_file_from_apk_original(self, news_id):
        """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ –ø–æ–ª—è apk-original"""
        print("üîÑ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ delete_old_file_from_apk_original")
        # –î–ª—è API –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π endpoint
        print("‚ÑπÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        return True
    
    
    def update_existing_file_in_dle_files(self, news_id, app_name, version, file_extension, downloaded_filename, file_size, checksum, download_dir):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ dle_files –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π"""
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ dle_files –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ API
            response = self.api_request("get_post", {"id": news_id})
            
            if not response.get("success"):
                print(f"‚ùå –ù–æ–≤–æ—Å—Ç—å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            post_data = response["data"]
            xfields = post_data["xfields"]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π attachment ID –∏–∑ –ø–æ–ª—è apk-original
            old_attachment_match = re.search(r'apk-original\|\[attachment=(\d+):', xfields)
            
            if not old_attachment_match:
                print(f"‚ÑπÔ∏è –ü–æ–ª–µ apk-original –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç attachment –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                return None
            
            old_file_id = int(old_attachment_match.group(1))
            print(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª ID {old_file_id} –≤ –ø–æ–ª–µ apk-original")
            
            # –ü–ï–†–ï–•–û–î –ö –û–ë–ù–û–í–õ–ï–ù–ò–Æ –ë–î
            print(f"üíæ –®–ê–ì 6: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            readable_name = self._transliterate_cyrillic(app_name)
            new_readable_filename = f"{readable_name} {version}{file_extension}"
            new_onserver = f"{download_dir.name}/{downloaded_filename}"
            current_timestamp = int(time.time())
            
            print(f"üìù –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {new_readable_filename}")
            print(f"üóÇÔ∏è –ù–æ–≤—ã–π –ø—É—Ç—å: {new_onserver}")
            
            # –®–ê–ì 7: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ dle_files —á–µ—Ä–µ–∑ API
            print(f"üíæ –®–ê–ì 7: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö dle_files")
            data = {
                "file_id": old_file_id,
                "name": new_readable_filename,
                "onserver": new_onserver,
                "date": current_timestamp,
                "size": file_size,
                "checksum": checksum
            }
            
            response = self.api_request("update_dle_file", data=data)
            
            if response.get("success"):
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID {old_file_id} –≤ dle_files")
                return old_file_id
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ dle_files: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ dle_files: {e}")
            import traceback
            print(f"üîß Traceback: {traceback.format_exc()}")
            return None

    def delete_old_file(self, old_file_id, news_id=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ ID –∏–∑ dle_files"""
        import os
        import logging
        from pathlib import Path
        from datetime import datetime
        try:
            from .config import FILE_DIRS, DELETION_LOG_FILE
        except ImportError:
            from config import FILE_DIRS, DELETION_LOG_FILE
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        deletion_logger = logging.getLogger('file_deletion')
        deletion_logger.setLevel(logging.INFO)
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in deletion_logger.handlers[:]:
            deletion_logger.removeHandler(handler)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log_path = Path(DELETION_LOG_FILE)
        log_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        file_handler = logging.FileHandler(DELETION_LOG_FILE, encoding='utf-8')
        console_handler = logging.StreamHandler()
        
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        deletion_logger.addHandler(file_handler)
        deletion_logger.addHandler(console_handler)
        deletion_logger.propagate = False
        
        deletion_logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è old_file_id: {old_file_id}, news_id: {news_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ë–î
            response = self.api_request("get_file_info", data={"file_id": old_file_id})
            
            if not response.get("success"):
                deletion_logger.warning(f"‚ùå –ó–∞–ø–∏—Å—å —Å ID {old_file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ dle_files")
                return False
            
            file_data = response.get("file_info", {})
            onserver = file_data.get("onserver", "").strip()
            filename = file_data.get("name", "").strip()
            
            deletion_logger.info(f"üìù –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ - onserver: '{onserver}', name: '{filename}'")
            
            if not onserver:
                deletion_logger.warning(f"‚ùå –ü–æ–ª–µ onserver –ø—É—Å—Ç–æ –¥–ª—è —Ñ–∞–π–ª–∞ ID {old_file_id}")
                return False
            
            # –û—á–∏—â–∞–µ–º –ø—É—Ç—å –æ—Ç –≤–µ–¥—É—â–∏—Ö —Å–ª–µ—à–µ–π –∏ –ø—Ä–æ–±–µ–ª–æ–≤
            onserver = onserver.strip().lstrip('/')
            deletion_logger.info(f"üßπ –û—á–∏—â–µ–Ω–Ω—ã–π onserver –ø—É—Ç—å: '{onserver}'")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            candidates = []
            for base_dir in FILE_DIRS:
                candidate_path = Path(base_dir) / onserver
                candidates.append((base_dir, candidate_path))
                deletion_logger.info(f"üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {candidate_path}")
            
            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            deleted = False
            for base_dir, candidate_path in candidates:
                deletion_logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {candidate_path}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç path traversal)
                    base_path = Path(base_dir).resolve()
                    resolved_candidate = candidate_path.resolve()
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ resolved_candidate –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ base_path
                        resolved_candidate.relative_to(base_path)
                        deletion_logger.info(f"‚úÖ –ü—É—Ç—å –±–µ–∑–æ–ø–∞—Å–µ–Ω: {resolved_candidate}")
                    except ValueError:
                        deletion_logger.error(f"‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å (path traversal): {resolved_candidate}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if candidate_path.exists() and candidate_path.is_file():
                        file_size = candidate_path.stat().st_size
                        deletion_logger.info(f"üìÅ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {candidate_path}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                        
                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                        candidate_path.unlink()
                        deletion_logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {candidate_path}")
                        deleted = True
                        break
                    else:
                        deletion_logger.info(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {candidate_path}")
                        
                except Exception as e:
                    deletion_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º {candidate_path}: {e}")
                    import traceback
                    deletion_logger.error(f"üîß Traceback: {traceback.format_exc()}")
                    continue
            
            if deleted:
                deletion_logger.info(f"‚úÖ –ò–¢–û–ì: –§–∞–π–ª —Å ID {old_file_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                return True
            else:
                deletion_logger.warning(f"‚ùå –ò–¢–û–ì: –§–∞–π–ª —Å ID {old_file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –ø–∞–ø–æ–∫")
                return False
                
        except Exception as e:
            deletion_logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ID {old_file_id}: {e}")
            import traceback
            deletion_logger.error(f"üîß Traceback: {traceback.format_exc()}")
            return False

