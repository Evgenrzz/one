#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ step4_links.txt
–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä—ã APKCombo –∏ APKPure –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ ;
"""
import asyncio
import os
import re
import logging
from pathlib import Path
from datetime import datetime
from .config import LINKS_FILE, BASE_DOWNLOAD_DIR, ENABLE_SHA256_CHECK, ENABLE_FUZZY_MATCHING, ENABLE_SIZE_CHECK, ENABLE_DETAILED_LOGGING
from .database_api import DatabaseManagerAPI as DatabaseManager
from .version_extractor import VersionExtractor
from .lib.file_downloader import FileDownloader
from .lib.apkpure_downloader import APKPureDownloader
from .lib.duplicate_analyzer import DuplicateAnalyzer


class FileProcessor:
    def __init__(self):
        self.analyzer = DuplicateAnalyzer()
        self.db = DatabaseManager(analyzer=self.analyzer)
        self.version_extractor = VersionExtractor()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        self.download_dir = self.get_current_download_dir()
        self.downloader = FileDownloader(self.download_dir)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª logs/parser1_log.txt"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
        log_filename = "parser1_log.txt"
        log_filepath = logs_dir / log_filename
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_filepath, mode='w', encoding='utf-8'),  # mode='w' –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª
                logging.StreamHandler()  # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            ]
        )
        
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ parser1 - –ª–æ–≥ —Ñ–∞–π–ª: {log_filepath}")
    
    def get_current_download_dir(self):
        """–ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü"""
        now = datetime.now()
        month_dir = f"{now.year}-{now.month:02d}"
        full_path = Path(BASE_DOWNLOAD_DIR) / month_dir
        full_path.mkdir(parents=True, exist_ok=True)
        return full_path

    def parse_link_line(self, line):
        """–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞ step4_links.txt —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
        # –§–æ—Ä–º–∞—Ç: 1,[attachment=861:Apple Music_5.0.0.xapk],https://apkcombo.com/ru/apple-music/com.apple.android.music/
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: 22,[attachment=979:AIDA64_2.12.apk],https://apkcombo.com/ru/aida64/com.finalwire.aida64/;https://apkpure.com/ru/aida64/com.finalwire.aida64
        line = line.strip()
        if not line:
            return None

        parts = line.split(',', 2)
        if len(parts) != 3:
            return None

        news_id = parts[0].strip()
        attachment_info = parts[1].strip()
        urls_string = parts[2].strip()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ ;
        urls = [url.strip() for url in urls_string.split(';') if url.strip()]
        
        if not urls:
            return None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ attachment
        match = re.search(r'\[attachment=(\d+):([^\]]+)\]', attachment_info)
        if not match:
            return None

        old_file_id = match.group(1)
        filename = match.group(2)

        return {
            'news_id': int(news_id),
            'old_file_id': int(old_file_id),
            'filename': filename,
            'urls': urls
        }
    
    async def get_best_url_from_multiple(self, urls, app_name):
        """–ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ –≤–µ—Ä—Å–∏–∏"""
        if len(urls) == 1:
            return urls[0], None
        
        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(urls)} —Å—Å—ã–ª–æ–∫ –¥–ª—è {app_name}")
        
        best_url = None
        best_version = None
        url_versions = []
        
        for i, url in enumerate(urls, 1):
            try:
                self.logger.info(f"  üì± –°—Å—ã–ª–∫–∞ {i}: {url}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Å —Å–∞–π—Ç–∞
                version = await self.version_extractor.extract_version_from_page(url)
                if version:
                    url_versions.append((url, version))
                    self.logger.info(f"    ‚úÖ –í–µ—Ä—Å–∏—è: {version}")
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
                    if best_version is None or self.compare_versions(version, best_version) > 0:
                        best_version = version
                        best_url = url
                        self.logger.info(f"    üèÜ –ù–æ–≤–∞—è –ª—É—á—à–∞—è –≤–µ—Ä—Å–∏—è: {version}")
                else:
                    self.logger.warning(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å {url}")
                    
            except Exception as e:
                self.logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
        
        if best_url:
            self.logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è —Å—Å—ã–ª–∫–∞: {best_url} (–≤–µ—Ä—Å–∏—è: {best_version})")
            return best_url, best_version
        else:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –Ω–∏ —Å –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é")
            return urls[0], None
    
    def compare_versions(self, version1, version2):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 –µ—Å–ª–∏ v1 > v2, -1 –µ—Å–ª–∏ v1 < v2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã"""
        if not version1 or not version2:
            return 0
            
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
            v1_parts = [int(x) for x in version1.split('.')]
            v2_parts = [int(x) for x in version2.split('.')]
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –Ω—É–ª—è–º–∏
            max_len = max(len(v1_parts), len(v2_parts))
            v1_parts.extend([0] * (max_len - len(v1_parts)))
            v2_parts.extend([0] * (max_len - len(v2_parts)))
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º
            for i in range(max_len):
                if v1_parts[i] > v2_parts[i]:
                    return 1
                elif v1_parts[i] < v2_parts[i]:
                    return -1
            
            return 0
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            if version1 > version2:
                return 1
            elif version1 < version2:
                return -1
            else:
                return 0

    async def process_single_link(self, link_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω—É —Å—Å—ã–ª–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
        self.logger.info(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {link_data['filename']} (ID: {link_data['news_id']})")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        app_name = self.version_extractor.extract_app_name_from_filename(link_data['filename'])
        file_version = self.version_extractor.extract_version_from_filename(link_data['filename'])

        self.logger.info(f"üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}")
        self.logger.info(f"üî¢ –í–µ—Ä—Å–∏—è –∏–∑ —Ñ–∞–π–ª–∞: {file_version}")

        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        best_url, best_version = await self.get_best_url_from_multiple(link_data['urls'], app_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        link_data['url'] = best_url
        if best_version:
            self.logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å –ª—É—á—à–µ–π —Å—Å—ã–ª–∫–∏: {best_version}")
            page_version = best_version
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è APKCombo)
            page_version = None
            if 'apkcombo.com' in best_url:
                try:
                    page_version = await self.version_extractor.extract_version_from_page(best_url)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã APKCombo: {e}")
                    page_version = None
            else:
                self.logger.info("‚ÑπÔ∏è –í–µ—Ä—Å–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –ø–∞—Ä—Å–µ—Ä–æ–º APKPure")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é (–¢–û–õ–¨–ö–û –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏)
        final_version = self.version_extractor.get_version(link_data['filename'], page_version)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
        clean_version_for_check = self.version_extractor.extract_clean_version(final_version)

        self.logger.info(f"üè∑Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä): {clean_version_for_check}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        package_name = self.version_extractor.extract_package_name_from_url(link_data['url'])
        source_priority = self.version_extractor.get_source_priority(link_data['url'])
        
        self.logger.info(f"üì¶ Package name: {package_name or 'N/A'}")
        self.logger.info(f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_priority}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ø–æ–ª–µ apk-original
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ø–æ–ª–µ apk-original...")
        need_update_by_apk_original = self.db.check_version_in_apk_original(link_data['news_id'], clean_version_for_check)
        
        if not need_update_by_apk_original:
            self.logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –≤–µ—Ä—Å–∏—è –≤ apk-original –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            self.analyzer.log_file_processed(app_name, clean_version_for_check, 0, 
                                           link_data['url'], is_new=False)
            return True

        # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –≤ apk-original —É—Å—Ç–∞—Ä–µ–ª–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π
        self.logger.info("üîÑ –í–µ—Ä—Å–∏—è –≤ apk-original —É—Å—Ç–∞—Ä–µ–ª–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–µ–π –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ
        self.logger.info("üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            if 'apkcombo.com' in link_data['url']:
                self.logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä APKCombo")
                downloaded_file, download_version = await self.downloader.download_from_apkcombo(link_data['url'])
            elif 'apkpure.com' in link_data['url']:
                self.logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä APKPure")
                # –°–æ–∑–¥–∞–µ–º APKPure downloader —Å —Ç–æ–π –∂–µ –ø–∞–ø–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                apkpure_downloader = APKPureDownloader(self.download_dir)
                downloaded_file, download_version = await apkpure_downloader.download_from_apkpure(link_data['url'])
            else:
                self.logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∞–π—Ç: {link_data['url']}")
                return False

            if not downloaded_file:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return False

            # –ï—Å–ª–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–µ—Ä—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if download_version and download_version != "Unknown":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –∏–∑ download_version
                clean_download_version = self.version_extractor.extract_clean_version(download_version)
                clean_version_for_check = clean_download_version
                self.logger.info(f"üéØ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {clean_version_for_check}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = downloaded_file.stat().st_size
            
            # –í—ã—á–∏—Å–ª—è–µ–º —á–µ–∫—Å—É–º–º—ã
            if ENABLE_SHA256_CHECK:
                self.logger.info("üîê –í—ã—á–∏—Å–ª—è–µ–º —á–µ–∫—Å—É–º–º—ã...")
                checksum, sha256_hash = self.downloader.calculate_checksums_parallel(downloaded_file)
            else:
                self.logger.info("üîê –í—ã—á–∏—Å–ª—è–µ–º MD5...")
                checksum = self.downloader.calculate_checksum(downloaded_file)
                sha256_hash = None

            self.logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            self.logger.info(f"üîê MD5: {checksum}")
            if sha256_hash:
                self.logger.info(f"üîê SHA-256: {sha256_hash[:16]}...")
            self.logger.info(f"üè∑Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ë–î: {clean_version_for_check}")
            self.logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {downloaded_file.name}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ –≤–µ—Ä—Å–∏—è –≤ apk-original —É—Å—Ç–∞—Ä–µ–ª–∞
            self.logger.info("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–µ–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å...")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(downloaded_file.name)[1]
            
            # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            from .lib.file_normalizer import FileNormalizer
            clean_filename = FileNormalizer.clean_source_suffixes(downloaded_file.name)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
            if clean_filename != downloaded_file.name:
                new_file_path = self.download_dir / clean_filename
                downloaded_file.rename(new_file_path)
                downloaded_file = new_file_path
                self.logger.info(f"üìÅ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {downloaded_file.name}")
            
            self.logger.info(f"üè∑Ô∏è –ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ë–î: {clean_version_for_check}")
            
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ dle_files –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
            self.logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ dle_files...")
            file_id = self.db.update_existing_file_in_dle_files(
                link_data['news_id'],
                app_name,
                clean_version_for_check,
                file_extension,
                clean_filename,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                file_size,
                checksum,
                self.download_dir
            )

            if not file_id:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ dle_files")
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º dle_post —Å —á–∏—Ç–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ file_id)
            success = self.db.update_dle_post(
                link_data['news_id'],
                file_id,
                app_name,
                clean_version_for_check,
                file_extension
            )

            if not success:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å dle_post")
                return False

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            self.db.add_to_tracking(
                link_data['news_id'],
                app_name,
                clean_version_for_check,  # –¢–û–õ–¨–ö–û –≤–µ—Ä—Å–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "1.8.3"
                file_size,
                downloaded_file,
                checksum,
                link_data['url'],
                sha256_hash=sha256_hash,
                package_name=package_name,
                source_priority=source_priority
            )

            self.logger.info(f"‚úÖ –§–∞–π–ª {clean_filename} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –≤–µ—Ä—Å–∏–µ–π {clean_version_for_check}!")
            self.analyzer.log_file_processed(app_name, clean_version_for_check, file_size, 
                                           link_data['url'], is_new=True)
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            self.analyzer.log_processing_error(str(e), f"–¥–ª—è {app_name}")
            return False

    async def process_links_file(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
        if not os.path.exists(LINKS_FILE):
            self.logger.error(f"‚ùå –§–∞–π–ª {LINKS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        self.logger.info(f"üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {LINKS_FILE}")

        with open(LINKS_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫")

        # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–µ–π
        self.analyzer.start_processing()

        processed = 0
        errors = 0

        for i, line in enumerate(lines, 1):
            self.logger.info(f"\n{'='*50}")
            self.logger.info(f"üìù –°—Ç—Ä–æ–∫–∞ {i}/{len(lines)}")

            link_data = self.parse_link_line(line)
            if not link_data:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É: {line.strip()}")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ URLs –≤ —Å–ø–∏—Å–∫–µ)
            has_supported_url = False
            for url in link_data['urls']:
                if 'apkcombo.com' in url or 'apkpure.com' in url:
                    has_supported_url = True
                    break
            
            if not has_supported_url:
                self.logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏: {link_data['urls']}")
                continue

            try:
                success = await self.process_single_link(link_data)
                if success:
                    processed += 1
                else:
                    errors += 1

            except Exception as e:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                errors += 1
                continue

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–µ–π
        self.analyzer.end_processing()

        self.logger.info(f"\n{'='*50}")
        self.logger.info(f"üìä –ò–¢–û–ì–ò:")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        self.logger.info(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
        self.logger.info(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")


