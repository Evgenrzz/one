#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å APKPure.com
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
"""
import asyncio
import os
import re
import hashlib
from pathlib import Path
from datetime import datetime
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError
from ..config import BROWSER_ARGS, USER_AGENT, CLOUDFLARE_TIMEOUT, PAGE_LOAD_TIMEOUT, DOWNLOAD_TIMEOUT
from .file_normalizer import FileNormalizer


class APKPureDownloader:
    def __init__(self, download_dir):
        self.download_dir = download_dir

    def extract_package_name(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç package name –∏–∑ URL APKPure"""
        # –ü—Ä–∏–º–µ—Ä: https://apkpure.com/ru/brawl-stars-android/com.supercell.brawlstars/download
        # –ò–∑–≤–ª–µ–∫–∞–µ–º com.supercell.brawlstars
        match = re.search(r'/([a-zA-Z0-9._-]+)/download', url)
        if match:
            return match.group(1)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        match = re.search(r'/([a-zA-Z0-9._-]+)/?$', url.rstrip('/'))
        if match:
            return match.group(1)

        return "unknown.app"

    def calculate_checksum(self, file_path):
        """–í—ã—á–∏—Å–ª—è–µ–º MD5 —á–µ–∫—Å—É–º–º—É —Ñ–∞–π–ª–∞"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    def normalize_filename(self, filename):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        return FileNormalizer.normalize_filename(filename)

    async def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        self.playwright = await async_playwright().start()
        self.browser = await self.playwright.chromium.launch(
            headless=True,
            args=BROWSER_ARGS + [
                '--disable-extensions',
                '--no-first-run',
                '--disable-default-apps',
                '--disable-features=TranslateUI',
                '--disable-ipc-flooding-protection',
                '--disable-web-security',
                '--allow-running-insecure-content',
                '--disable-features=VizDisplayCompositor'
            ]
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.context = await self.browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent=USER_AGENT,
            locale='ru-RU',
            timezone_id='Europe/Moscow',
            accept_downloads=True,
            extra_http_headers={
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'Cache-Control': 'max-age=0',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Sec-Fetch-User': '?1',
                'Upgrade-Insecure-Requests': '1'
            }
        )

        self.page = await self.context.new_page()

        # –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        await self.page.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });

            window.chrome = {
                runtime: {},
            };

            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });

            Object.defineProperty(navigator, 'languages', {
                get: () => ['ru-RU', 'ru', 'en-US', 'en'],
            });
        """)

    async def check_available_formats(self, app_url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_url = app_url
            if not download_url.endswith('/download'):
                download_url = download_url.rstrip('/') + '/download'

            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {download_url}")
            await self.page.goto(download_url, wait_until='domcontentloaded', timeout=PAGE_LOAD_TIMEOUT)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await self.page.wait_for_timeout(3000)

            available_formats = set()

            # –ò—â–µ–º –≤ –±–ª–æ–∫–µ version-list
            try:
                version_list = await self.page.locator('#version-list').first
                if await version_list.is_visible():
                    tags = await version_list.locator('span.tag[data-tag]').all()
                    for tag in tags:
                        tag_value = await tag.get_attribute('data-tag')
                        if tag_value:
                            available_formats.add(tag_value.upper())
                            print(f"üì¶ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –≤ version-list: {tag_value}")
            except:
                pass

            # –ò—â–µ–º –≤ –±–ª–æ–∫–µ show-more
            try:
                show_more = await self.page.locator('.show-more').first
                if await show_more.is_visible():
                    tags = await show_more.locator('span.tag[data-tag]').all()
                    for tag in tags:
                        tag_value = await tag.get_attribute('data-tag')
                        if tag_value:
                            available_formats.add(tag_value.upper())
                            print(f"üì¶ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –≤ show-more: {tag_value}")
            except:
                pass

            # –ò—â–µ–º –≤ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            try:
                all_tags = await self.page.locator('span.tag[data-tag]').all()
                for tag in all_tags:
                    tag_value = await tag.get_attribute('data-tag')
                    if tag_value and tag_value.upper() in ['APK', 'XAPK', 'APKS']:
                        available_formats.add(tag_value.upper())
                        print(f"üì¶ –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {tag_value}")
            except:
                pass

            print(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(sorted(available_formats))}")
            return available_formats

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {e}")
            return set()

    def determine_download_priority(self, available_formats):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        formats = {f.upper() for f in available_formats}

        print(f"üß† Analyzing formats: {formats}")

        # Priority logic:
        # 1. If APK available - download only APK
        # 2. If XAPK available but no APK - download XAPK
        # 3. If XAPK + APKs - download XAPK
        # 4. If XAPK + APK + APKs - download only APK

        if 'APK' in formats:
            print("‚úÖ Priority: APK (found clean APK)")
            return 'APK'
        elif 'XAPK' in formats and 'APK' not in formats:
            print("‚úÖ Priority: XAPK (APK not available)")
            return 'XAPK'
        elif 'XAPK' in formats:
            print("‚úÖ Priority: XAPK (default)")
            return 'XAPK'
        else:
            print("‚ö†Ô∏è Priority: APK (fallback)")
            return 'APK'

    async def extract_version_from_page(self, app_url):
        """Extract version from APKPure app page"""
        try:
            # Remove /download from URL if present
            page_url = app_url.replace('/download', '')
            
            print(f"üîç Getting version from page: {page_url}")
            await self.page.goto(page_url, wait_until='domcontentloaded', timeout=PAGE_LOAD_TIMEOUT)
            
            # Wait for page load
            await self.page.wait_for_timeout(2000)
            
            # Search for version in various places
            version_selectors = [
                '.version-number',
                '.version',
                '[data-dt-version]',
                '.apk-version',
                '.app-version'
            ]
            
            for selector in version_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element:
                        version_text = await element.inner_text()
                        # Extract only version number
                        version_match = re.search(r'(\d+\.\d+\.\d+)', version_text)
                        if version_match:
                            version = version_match.group(1)
                            print(f"‚úÖ Found version on APKPure page: {version}")
                            return version
                except:
                    continue
            
            print("‚ö†Ô∏è Version not found on APKPure page")
            return None
            
        except Exception as e:
            print(f"‚ùå Error getting version from APKPure page: {e}")
            return None

    async def download_file(self, file_type, package_name):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {file_type} —Å APKPure...")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_info = {'downloads': [], 'completed_files': []}

            async def handle_download(download):
                try:
                    filename = download.suggested_filename
                    print(f"üì• –ù–∞—á–∞—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
                    download_info['downloads'].append(download)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

                    if filename:
                        suggested_name = filename
                    else:
                        ext = '.xapk' if file_type == 'XAPK' else '.apk'
                        suggested_name = f"App_{timestamp}{ext}"

                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                    if not suggested_name.lower().endswith(('.apk', '.xapk')):
                        if file_type == 'XAPK':
                            suggested_name += '.xapk'
                        else:
                            suggested_name += '.apk'

                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    normalized_name = self.normalize_filename(suggested_name)
                    filepath = self.download_dir / normalized_name
                    
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫: {filepath}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    try:
                        await download.save_as(filepath)
                        download_info['completed_files'].append(str(filepath))

                        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                        if filepath.exists():
                            size_mb = filepath.stat().st_size / (1024 * 1024)
                            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
                            if file_type == 'APK' and size_mb < 80 and size_mb > 30:
                                print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π APK —Ñ–∞–π–ª ({size_mb:.2f} MB)")
                                print("üí° –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ –ø–æ–ª–Ω—ã–π APK, –∞ –∑–∞–≥–ª—É—à–∫–∞")
                            elif size_mb > 100:
                                print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞!")
                            elif size_mb > 10:
                                print("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω")
                            else:
                                print("‚ö†Ô∏è –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")

                    except Exception as save_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {save_error}")

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            self.page.on("download", handle_download)

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_url = f"https://d.apkpure.com/b/{file_type}/{package_name}?version=latest"

            print(f"üîó –°–∫–∞—á–∏–≤–∞–µ–º {file_type}: {download_url}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            try:
                await self.page.goto(download_url, wait_until='commit', timeout=10000)
            except Exception as goto_error:
                if "Download is starting" in str(goto_error):
                    print(f"‚úÖ {file_type} —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {goto_error}")
                    return None, None

            # –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            wait_time = 0
            while wait_time < 15 and not download_info['downloads']:
                await self.page.wait_for_timeout(1000)
                wait_time += 1

            if download_info['downloads']:
                print(f"üì• {file_type} —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                wait_time = 0
                while wait_time < 300 and not download_info['completed_files']:
                    await self.page.wait_for_timeout(1000)
                    wait_time += 1

                    if wait_time % 30 == 0:
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {wait_time}—Å")

                if download_info['completed_files']:
                    await self.page.wait_for_timeout(3000)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    downloaded_path = download_info['completed_files'][0]
                    return Path(downloaded_path), "Unknown"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Path –∏ –≤–µ—Ä—Å–∏—é

            print(f"‚ùå {file_type} —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return None, None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {file_type}: {e}")
            return None, None

    async def cleanup(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await asyncio.sleep(2)

            if hasattr(self, 'page'):
                try:
                    await self.page.close()
                except:
                    pass

            if hasattr(self, 'context'):
                try:
                    await self.context.close()
                except:
                    pass

            if hasattr(self, 'browser'):
                try:
                    await self.browser.close()
                except:
                    pass

            if hasattr(self, 'playwright'):
                try:
                    await self.playwright.stop()
                except:
                    pass
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ APKPure: {e}")

    async def download_from_apkpure(self, app_url):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å APKPure"""
        try:
            print("üé≠ –ó–∞–ø—É—Å–∫ APKPure –∑–∞–≥—Ä—É–∑—á–∏–∫–∞")
            print(f"üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_url}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º package name
            package_name = self.extract_package_name(app_url)
            print(f"üì¶ Package: {package_name}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            await self.setup_browser()

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                page_version = await self.extract_version_from_page(app_url)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
                page_version = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            available_formats = await self.check_available_formats(app_url)

            if not available_formats:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –ø—Ä–æ–±—É–µ–º APK")
                file_type = 'APK'
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                file_type = self.determine_download_priority(available_formats)

            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            downloaded_file, download_version = await self.download_file(file_type, package_name)

            if downloaded_file and downloaded_file.exists():
                print("=" * 60)
                print("üéâ –°–ö–ê–ß–ò–í–ê–ù–ò–ï APKPure –ó–ê–í–ï–†–®–ï–ù–û!")

                size_mb = downloaded_file.stat().st_size / (1024 * 1024)
                actual_type = "XAPK" if str(downloaded_file).lower().endswith('.xapk') else "APK"

                print(f"üì± –§–∞–π–ª: {downloaded_file.name}")
                print(f"üì¶ –¢–∏–ø: {actual_type}")
                print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
                print(f"üìÇ –ü—É—Ç—å: {downloaded_file.absolute()}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä—Å–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ "Unknown"
                final_version = page_version if page_version else "Unknown"
                return downloaded_file, final_version
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å APKPure")
                return None, None

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ APKPure: {e}")
            return None, None
        finally:
            await self.cleanup()
