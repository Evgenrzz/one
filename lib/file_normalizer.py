#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è APK —Ñ–∞–π–ª–æ–≤
–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É, –∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
"""

import re
import os


class FileNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ ‚Üí –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Å–∏–º–≤–æ–ª—ã ‚Üí –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"""

    @staticmethod
    def normalize_filename(filename):
        """–ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        print(f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        name_part, extension = os.path.splitext(filename)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É - —Ç–æ–ª—å–∫–æ –¥–ª—è name_part
        name_part = FileNormalizer.transliterate_cyrillic(name_part)
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        name_part = name_part.replace(' ', '_')      # –ø—Ä–æ–±–µ–ª—ã ‚Üí _
        name_part = name_part.replace('.', '_')      # —Ç–æ—á–∫–∏ ‚Üí _
        name_part = name_part.replace('+', '_')      # –ø–ª—é—Å—ã ‚Üí _
        name_part = name_part.replace('-', '_')      # –¥–µ—Ñ–∏—Å—ã ‚Üí _
        name_part = name_part.replace('(', '_')      # —Å–∫–æ–±–∫–∏ ‚Üí _
        name_part = name_part.replace(')', '_')
        name_part = name_part.replace('[', '_')
        name_part = name_part.replace(']', '_')
        name_part = name_part.replace('{', '_')
        name_part = name_part.replace('}', '_')
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _
        name_part = re.sub(r'[^a-zA-Z0-9_]', '', name_part)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        name_part = re.sub(r'_+', '_', name_part)
        name_part = name_part.strip('_')
        
        # –í—Å–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        name_part = name_part.lower()
        extension = extension.lower()
        
        # –í–¢–û–†–û–ô –≠–¢–ê–ü: —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—É—Ñ—Ñ–∏–∫—Å—ã _xapk –∏ _apk –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if name_part.endswith('_xapk') and extension == '.xapk':
            name_part = name_part[:-5]  # —É–±–∏—Ä–∞–µ–º '_xapk' (5 —Å–∏–º–≤–æ–ª–æ–≤)
            print(f"üîß –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Å—É—Ñ—Ñ–∏–∫—Å _xapk –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")
        elif name_part.endswith('_apk') and extension == '.apk':
            name_part = name_part[:-4]  # —É–±–∏—Ä–∞–µ–º '_apk' (4 —Å–∏–º–≤–æ–ª–∞)
            print(f"üîß –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Å—É—Ñ—Ñ–∏–∫—Å _apk –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        name_part = re.sub(r'_+', '_', name_part).strip('_')
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        normalized_filename = f"{name_part}{extension}"
        
        print(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: {normalized_filename}")
        return normalized_filename
    
    @staticmethod
    def transliterate_cyrillic(text):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É"""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ ‚Üí –ª–∞—Ç–∏–Ω–∏—Ü–∞
        cyrillic_to_latin = {
            '–ê': 'A', '–∞': 'a', '–ë': 'B', '–±': 'b', '–í': 'V', '–≤': 'v',
            '–ì': 'G', '–≥': 'g', '–î': 'D', '–¥': 'd', '–ï': 'E', '–µ': 'e',
            '–Å': 'Yo', '—ë': 'yo', '–ñ': 'Zh', '–∂': 'zh', '–ó': 'Z', '–∑': 'z',
            '–ò': 'I', '–∏': 'i', '–ô': 'Y', '–π': 'y', '–ö': 'K', '–∫': 'k',
            '–õ': 'L', '–ª': 'l', '–ú': 'M', '–º': 'm', '–ù': 'N', '–Ω': 'n',
            '–û': 'O', '–æ': 'o', '–ü': 'P', '–ø': 'p', '–†': 'R', '—Ä': 'r',
            '–°': 'S', '—Å': 's', '–¢': 'T', '—Ç': 't', '–£': 'U', '—É': 'u',
            '–§': 'F', '—Ñ': 'f', '–•': 'Kh', '—Ö': 'kh', '–¶': 'Ts', '—Ü': 'ts',
            '–ß': 'Ch', '—á': 'ch', '–®': 'Sh', '—à': 'sh', '–©': 'Sch', '—â': 'sch',
            '–™': '', '—ä': '', '–´': 'Y', '—ã': 'y', '–¨': '', '—å': '',
            '–≠': 'E', '—ç': 'e', '–Æ': 'Yu', '—é': 'yu', '–Ø': 'Ya', '—è': 'ya'
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        result = ""
        for char in text:
            if char in cyrillic_to_latin:
                result += cyrillic_to_latin[char]
            else:
                result += char
        
        return result

    @staticmethod
    def clean_source_suffixes(filename):
        """–£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–∏–ø–∞ '_apkcombo.com'"""
        # –£–¥–∞–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        suffixes_to_remove = [
            '_apkcombo.com',
            'apkcombo',
            '.apkcombo',
            '_apkmirror.com',
            'apkmirror',
            '_pureapk',
            '_pureapk.com'
        ]
        
        clean_filename = filename
        for suffix in suffixes_to_remove:
            if suffix in clean_filename:
                clean_filename = clean_filename.replace(suffix, '')
        
        return clean_filename
    
    @staticmethod
    def remove_duplicate_extensions(filename):
        """–£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–∏–ø–∞ XAPK.xapk –∏–ª–∏ APK.apk
        patterns = [
            r'_xapk\.xapk$',  # —É–¥–∞–ª—è–µ–º _xapk.xapk
            r'_apk\.apk$'     # —É–¥–∞–ª—è–µ–º _apk.apk
        ]
        
        for pattern in patterns:
            filename = re.sub(pattern, '', filename, flags=re.IGNORECASE)
        
        return filename


# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
if __name__ == "__main__":
    normalizer = FileNormalizer()
    
    test_files = [
        "–°–∏–º—É–ª—è—Ç–æ—Ä –≤–æ–∂–¥–µ–Ω–∏—è UAZ Hunter 1.3.1_XAPK.xapk",
        "Russian+Car+Driver+Uaz+Hunter_1.2.9.xapk", 
        "MAPS.ME_ Offline maps GPS Nav_v16.1.71793-googleRelease.apk",
        "Adobe_Flash_Player_APK.apk"
    ]
    
    for test_file in test_files:
        print(f"\n=== –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_file} ===")
        result = normalizer.normalize_filename(test_file)
        print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {result}")