#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–µ–π –∏ –º–µ—Ç—Ä–∏–∫
"""
import json
import time
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path


class DuplicateAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–µ–π –∏ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self, log_dir: str = "logs"):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        self.metrics = {
            'total_processed': 0,
            'duplicates_found': 0,
            'duplicates_by_sha256': 0,
            'duplicates_by_name': 0,
            'duplicates_by_size': 0,
            'similar_apps_found': 0,
            'files_replaced_by_priority': 0,
            'processing_errors': 0,
            'start_time': None,
            'end_time': None
        }
        self.duplicate_log = []
    
    def start_processing(self):
        """–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        self.metrics['start_time'] = datetime.now()
        self.log(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")
    
    def end_processing(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        try:
            self.metrics['end_time'] = datetime.now()
            duration = (self.metrics['end_time'] - self.metrics['start_time']).total_seconds()
            self.log(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            self._save_metrics()
            self._print_summary()
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # –ü—Ä–æ–±—É–µ–º —Ö–æ—Ç—è –±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É
            try:
                self._print_summary()
            except:
                pass
    
    def log_duplicate_found(self, duplicate_type: str, app_name: str, version: str, 
                           reason: str, similarity: float = None):
        """–õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥—É–±–ª—å"""
        self.metrics['duplicates_found'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        counter_key = f'duplicates_by_{duplicate_type}'
        if counter_key in self.metrics:
            self.metrics[counter_key] += 1
        
        duplicate_info = {
            'timestamp': datetime.now().isoformat(),
            'type': duplicate_type,
            'app_name': app_name,
            'version': version,
            'reason': reason,
            'similarity': similarity
        }
        
        self.duplicate_log.append(duplicate_info)
        self.log(f"üîç –î—É–±–ª—å ({duplicate_type}): {app_name} v{version} - {reason}")
    
    def log_similar_apps(self, app_name: str, similar_apps: List[Dict]):
        """–õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.metrics['similar_apps_found'] += len(similar_apps)
        self.log(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(similar_apps)} –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è {app_name}")
        
        for similar in similar_apps[:3]:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3
            self.log(f"   - {similar['app_name']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similar['similarity']:.2f})")
    
    def log_file_replaced(self, old_app: str, new_app: str, reason: str):
        """–õ–æ–≥–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É —Ñ–∞–π–ª–∞"""
        self.metrics['files_replaced_by_priority'] += 1
        self.log(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {old_app} -> {new_app} ({reason})")
    
    def log_processing_error(self, error: str, context: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.metrics['processing_errors'] += 1
        self.log(f"‚ùå –û—à–∏–±–∫–∞: {error} {context}")
    
    def log_file_processed(self, app_name: str, version: str, file_size: int, 
                          source: str, is_new: bool = True):
        """–õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        self.metrics['total_processed'] += 1
        status = "–Ω–æ–≤—ã–π" if is_new else "–¥—É–±–ª—å"
        self.log(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω {status} —Ñ–∞–π–ª: {app_name} v{version} ({file_size} –±–∞–π—Ç) –∏–∑ {source}")
    
    def log(self, message: str):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        log_file = self.log_dir / f"processing_{datetime.now().strftime('%Y%m%d')}.log"
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(log_message + '\n')
    
    def _save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
        try:
            metrics_file = self.log_dir / f"metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            serializable_metrics = self.metrics.copy()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
            if serializable_metrics['start_time']:
                serializable_metrics['start_time'] = serializable_metrics['start_time'].isoformat()
            if serializable_metrics['end_time']:
                serializable_metrics['end_time'] = serializable_metrics['end_time'].isoformat()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É–±–ª—è—Ö
            serializable_metrics['duplicate_details'] = self.duplicate_log
            
            with open(metrics_file, 'w', encoding='utf-8') as f:
                json.dump(serializable_metrics, f, ensure_ascii=False, indent=2)
            
            self.log(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {metrics_file}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –¥—É–±–ª–µ–π
            try:
                simple_metrics = {
                    'total_processed': self.metrics['total_processed'],
                    'duplicates_found': self.metrics['duplicates_found'],
                    'duplicates_by_sha256': self.metrics['duplicates_by_sha256'],
                    'duplicates_by_name': self.metrics['duplicates_by_name'],
                    'duplicates_by_size': self.metrics['duplicates_by_size'],
                    'similar_apps_found': self.metrics['similar_apps_found'],
                    'files_replaced_by_priority': self.metrics['files_replaced_by_priority'],
                    'processing_errors': self.metrics['processing_errors'],
                    'start_time': self.metrics['start_time'].isoformat() if self.metrics['start_time'] else None,
                    'end_time': self.metrics['end_time'].isoformat() if self.metrics['end_time'] else None
                }
                
                simple_metrics_file = self.log_dir / f"metrics_simple_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                with open(simple_metrics_file, 'w', encoding='utf-8') as f:
                    json.dump(simple_metrics, f, ensure_ascii=False, indent=2)
                
                self.log(f"üìä –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {simple_metrics_file}")
            except Exception as e2:
                self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e2}")
    
    def _print_summary(self):
        """–í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ü–û –û–ë–†–ê–ë–û–¢–ö–ï –î–£–ë–õ–ï–ô")
        print("="*60)
        
        total = self.metrics['total_processed']
        duplicates = self.metrics['duplicates_found']
        errors = self.metrics['processing_errors']
        
        print(f"üìÅ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–µ–π: {duplicates}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
        
        if total > 0:
            duplicate_rate = (duplicates / total) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–±–ª–µ–π: {duplicate_rate:.1f}%")
        
        print("\nüîç –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–£–ë–õ–ï–ô –ü–û –¢–ò–ü–ê–ú:")
        print(f"   SHA-256 (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ): {self.metrics['duplicates_by_sha256']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {self.metrics['duplicates_by_name']}")
        print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {self.metrics['duplicates_by_size']}")
        
        print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –ü–æ—Ö–æ–∂–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {self.metrics['similar_apps_found']}")
        print(f"   –§–∞–π–ª–æ–≤ –∑–∞–º–µ–Ω–µ–Ω–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: {self.metrics['files_replaced_by_priority']}")
        
        if self.metrics['start_time'] and self.metrics['end_time']:
            duration = (self.metrics['end_time'] - self.metrics['start_time']).total_seconds()
            print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            if total > 0:
                print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {total/duration:.2f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫")
        
        print("="*60)
    
    def get_duplicate_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–±–ª–µ–π"""
        return {
            'total_duplicates': self.metrics['duplicates_found'],
            'by_type': {
                'sha256': self.metrics['duplicates_by_sha256'],
                'package': self.metrics['duplicates_by_package'],
                'name': self.metrics['duplicates_by_name'],
                'size': self.metrics['duplicates_by_size']
            },
            'similar_apps': self.metrics['similar_apps_found'],
            'replaced_files': self.metrics['files_replaced_by_priority']
        }
